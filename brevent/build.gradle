apply plugin: 'com.android.application'


android {
    compileSdkVersion rootProject.targetSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    if (rootProject.file('ant.properties').exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(rootProject.file('ant.properties')))

        defaultConfig {
            versionCode rootProject.versionCode
            versionName rootProject.versionName
            minSdkVersion rootProject.minSdkVersion
            maxSdkVersion rootProject.targetSdkVersion
            targetSdkVersion rootProject.targetSdkVersion
            buildConfigField 'boolean', 'RELEASE', properties['build.release']
            buildConfigField 'String', 'DONATE_ALIPAY', properties['build.alipay']
            buildConfigField 'String', 'DONATE_PAYPAL', properties['build.paypal']
            buildConfigField 'String', 'DONATE_WECHAT', properties['build.wechat']
            buildConfigField 'byte[]', 'DONATE_PLAY', properties['build.play']
            buildConfigField 'String', 'FEEDBACK', properties['build.feedback']
            buildConfigField 'String', 'EMAIL', properties['build.email']
            buildConfigField 'String', 'PROJECT', properties['build.project']
            resConfigs 'en', 'zh-rCN', 'zh-rTW'
        }

        signingConfigs {
            release {
                storeFile file(properties['key.store'])
                storePassword properties['key.store.password']
                keyAlias properties['key.alias']
                keyPassword properties['key.alias.password']
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
            debug {
                signingConfig signingConfigs.release
            }
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                if (variant.buildType.name == 'release') {
                    output.outputFile = rootProject.file("br-v${rootProject.simpleVersionName}.apk")
                }
            }
        }
    } else {
        defaultConfig {
            minSdkVersion rootProject.minSdkVersion
            maxSdkVersion rootProject.targetSdkVersion
            targetSdkVersion rootProject.targetSdkVersion
            buildConfigField 'boolean', 'RELEASE', 'false'
            buildConfigField 'String', 'DONATE_ALIPAY', 'null'
            buildConfigField 'String', 'DONATE_PAYPAL', 'null'
            buildConfigField 'String', 'DONATE_WECHAT', 'null'
            buildConfigField 'byte[]', 'DONATE_PLAY', 'null'
            buildConfigField 'String', 'FEEDBACK', 'null'
            buildConfigField 'String', 'EMAIL', 'null'
            buildConfigField 'String', 'PROJECT', 'null'
        }
    }

    sourceSets {
        main {
            jni.srcDirs = []
            if (!project.gradle.startParameter.taskRequests?.empty) {
                jniLibs.srcDirs = ['src/main/libs']
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    if (project.gradle.startParameter.taskRequests?.empty) {
        // for ide
        externalNativeBuild {
            ndkBuild {
                path 'src/main/jni/Android.mk'
            }
        }
    }
}

dependencies {
    compile "com.android.support:support-compat:${rootProject.supportLibraryVersion}"
    compile "com.android.support:support-core-ui:${rootProject.supportLibraryVersion}"
    compile "com.android.support:support-v13:${rootProject.supportLibraryVersion}"
    compile "com.android.support:cardview-v7:${rootProject.supportLibraryVersion}"
    compile "com.android.support:recyclerview-v7:${rootProject.supportLibraryVersion}"
    compile "com.android.support:design:${rootProject.supportLibraryVersion}"
    compile project(':donation')
    compile project(':brevent-protocol')
    compile 'eu.chainfire:libsuperuser:1.0.0.201608240809'
}

if (rootProject.file('ant.properties').exists()) {
    dependencies {
        compile project(':brevent-server')
    }
}


if (project.gradle.startParameter.taskRequests?.empty) {
    // for ide
    dependencies {
        compile project(':hidden-api')
    }
} else {
    // for gradle
    dependencies {
        provided rootProject.hiddenApi
    }
}

task renameBootstrap {
    doLast {
        rootProject.abiFilters.each { abi ->
            copy {
                from file("src/main/libs/${abi}/brevent")
                into "src/main/libs/${abi}"
                rename { 'libbrevent.so' }
            }
            delete file("src/main/libs/${abi}/brevent")
        }
    }
}

task buildBootstrap(type: Exec) {
    commandLine "${android.ndkDirectory}/ndk-build",
            '-C', file('src/main/jni').path,
            'APP_BUILD_SCRIPT=Android.mk',
            'NDK_APPLICATION_MK=Application.mk'
}

buildBootstrap.finalizedBy renameBootstrap

task cleanBootstrap(type: Exec) {
    commandLine "${android.ndkDirectory}/ndk-build",
            '-C', file('src/main/jni').path,
            'APP_BUILD_SCRIPT=Android.mk',
            'NDK_APPLICATION_MK=Application.mk',
            'clean'
    ignoreExitValue true
}

task deleteNativeBuild(type: Delete) {
    delete file('.externalNativeBuild')
    delete file('src/main/obj')
}

tasks.withType(JavaCompile) { compileTask ->
    compileTask.dependsOn buildBootstrap
    compileTask.dependsOn ':hidden-api:bundleRelease'
}

clean.dependsOn cleanBootstrap
clean.dependsOn deleteNativeBuild
